Singleton

GoF's definition:

Ensure a class only has one instance, and provide a global point of access to it.

The pattern allows:

    control over concrete class instantiating so that the only instance could be obtained.

In following example you can find an implementation of Registry.
Registry itself is a pattern and sometimes is considered as anti-pattern, but
it shows nicely how Singleton can be used. <dfn title="Fowler, Martin (2002-11-05). Patterns of Enterprise Application Architecture (Kindle Location 8052). Pearson Education (USA)">Fowler</dfn>
defines Registry as "A well known object that other ones can use to find related objects or service".
So that is an object which we use to store and access mixed types.
Obviously we have to make sure that whenever we access Registry we reach the same instance.
Static method getInstance() takes care of it. The very first time it's called
it creates an instance of Registry and stores it into static property $_instance and returns it.
Every time since that getInstance() returns the instance stored in $_instance.

That goes slightly easier in EcmaScript. We can access Registry object without instantiating it.
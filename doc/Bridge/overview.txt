Bridge

GoF's definition:

Decouple an abstraction from its implementation so that the two can vary independently.

The pattern allows:

    to avoid permanent binding between abstraction and its implementation;
    deferring the presence of the implementation to the point where the abstraction is utilized


Alike Abstract Factory and Bridge decouples an abstraction from its implementation.
Actually Abstract Factory can be used to build a particular Bridge.
But what is unique about Bridge - it provides an architecture where abstraction
and implementation are in separate class hierarchies.

PHP example shows the case where web statistics data can be retrieved from different sources
(Google Analytics and local DB) and be presented in table or graphic form.
Using inheritance we define ImpAbstract and subclasses GoogleAnalytics and LocalAnalytics
which implement ImpAbstract interface for both data sources.
AnalyticsAbstract consumes API provided by ImpAbstract and expose own
methods to subsclasses GraphViewData and TableViewData.

EcmaScript examples describe a solution for themable widget (slideshow).
Consider a slideshow which is meant to have thumbnail- or bullets-like
pagination depending on a theme and act differently on desktop and mobile devices.
Here the slideshow doesn't have pagination on mobiles devices, but supports
touch gestures to navigate slides.
AbstractImplementor implies an interface to be implemented by by all its derivatives:
theme classes and subclasses. AbstractSlideShow is a client to AbstractImplementor,
which forward the API to subclasses OnDesktopSlideShow and OnMobileSlideShow.

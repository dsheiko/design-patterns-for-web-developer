GoF's definition:

Separate the construction of a complex object from its representation so that the same construction process can create different representations.

The pattern allows:

    decoupling construction of complex objects from the module;
    multiple representations of object construction algorithm;
    run-time control over object construction process;
    an application design abstraction where one object acts as a Director and other as subordinated Builders.


Imagine that we have an object consisting of many parts which we
need to re-build into a new one so, that its parts had different representations.
For instance we work on a text convertor which is expected to process
properly all the parts of the original document. In following example you can
find Builder (AbstractConvertor) object with all the methods to convert every
property of the initial document (Author, Title, Chapter).
Concrete Builders Epub and Pdf implement Builder interface
for the responsive text formats. The Director (Reader) constructs
a new object (Product) from a given initial document (Entity) and using a Concrete Builder.

In EcmaScript example we use Director (moduleManager) to build a widget based
on a supplied configuration and using a given Concrete Builder (ThemeA).
Thus if configuration changes toward an other theme, it's going to be transparent
for the client application.
h2. Decorator

[blockquote:Attach additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality.|
Gang of Four|
Gamma, Erich; Helm, Richard; Johnson, Ralph; Vlissides, John (1994-10-31). Design Patterns: Elements of Reusable Object-Oriented Software|
http://www.goodreads.com/book/show/85009.Design_Patterns]

[img:doc/Decorator/uml.png|Decorator pattern class diagram]

The pattern allows:

* for extending (decoration) the functionality of a certain object at run-time, independently of other instances of the same class.

When we need to enhance an individual object with a particular responsibility, use of inheritance may be impractical.
Let's say we have a widget class. In some cases we need this widget with border, 
in some with scrollbar, in some with both. Relying on inheritance we would need 
not only classes for every representation, but also classes for every combination, provided 
number of possible combinations increases excessively with every new added representation. Using decorators 
we can configure representation on the fly. So we take concrete widget and pass it to scrollbar decorator. 
Then we pass derived object to border decorator. Thus, we get widget enhanced with both border and scrollbar.

Known uses
ZF 1.x utilized the decorator pattern in order to render elements and forms. So one could simply make a decorator...
 



h3. PHP Example

[img:doc/Decorator/PHP/uml.png|Decorator pattern PHP example class diagram]

[code:sources/Decorator/PHP/tutorial.php|php]

h3. JavaScript Example

[img:doc/Decorator/EcmaScript/uml.png|Decorator pattern EcmaScript example class diagram]

[code:sources/Decorator/JavaScript/example.js|js]

h3. JSA Example

[code:sources/Decorator/JSA/example.js|js]

h3. TypeScript Example

[code:sources/Decorator/TypeScript/example.ts|js]